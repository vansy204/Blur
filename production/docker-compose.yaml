version: '3.8'

services:
  # ====================
  # Databases
  # ====================
  neo4j:
    image: neo4j:latest
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/12345678

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root

  mongo:
    image: mongo:6.0
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_DELETE_TOPIC_ENABLE: "true"

  # ====================
  # Microservices
  # ====================
  api-gateway:
    build:
      context: ../Backend/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8888:8888"
    expose:
      - 8888
    depends_on:
      - identity-service
      - profile-service
      - notification-service
      - chat-service
      - post-service
      - story-service

  identity-service:
    build:
      context: ../Backend/IdentityService
      dockerfile: Dockerfile
    container_name: identity-service
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis

  profile-service:
    build:
      context: ../Backend/profile-service
      dockerfile: Dockerfile
    container_name: profile-service
    ports:
      - "8081:8081"
    depends_on:
      - neo4j

  notification-service:
    build:
      context: ../Backend/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8082:8082"
    depends_on:
      - kafka
      - redis
      - mongo

  chat-service:
    build:
      context: ../Backend/chat-service
      dockerfile: Dockerfile
    container_name: chat-service
    ports:
      - "8083:8083"
      - "8099:8099"
    depends_on:
      - mongo
      - redis

  post-service:
    build:
      context: ../Backend/post-service
      dockerfile: Dockerfile
    container_name: post-service
    ports:
      - "8084:8084"
    depends_on:
      - mongo

  story-service:
    build:
      context: ../Backend/story-service
      dockerfile: Dockerfile
    container_name: story-service
    ports:
      - "8086:8086"
    depends_on:
      - mongo
  nginx:
    image: nginx:1.23.3
    ports:
      - 80:80
    volumes:
      - ../frontend/build:/usr/share/nginx/html
      - ./default.conf:/etc/nginx/conf.d/default.conf
# ====================
# Volumes
# ====================
volumes:
  neo4j_data:
  mysql_data:
  mongo_data:

    
