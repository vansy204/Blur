import React, { createContext, useContext, useEffect, useRef, useState, useCallback } from "react";
import { SOCKET_URL } from "../utils/constants";
import { getToken } from "../utils/auth";

const SocketContext = createContext(null);

export const SocketProvider = ({ children }) => {
  const socketRef = useRef(null);
  const [isConnected, setIsConnected] = useState(false);
  const [error, setError] = useState("");
  
  // Callback refs ƒë·ªÉ tr√°nh stale closure
  const messageCallbacksRef = useRef({
    onMessageSent: null,      // Callback khi tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng
    onMessageReceived: null,   // Callback khi nh·∫≠n tin nh·∫Øn t·ª´ ng∆∞·ªùi kh√°c
  });

  // Register callbacks t·ª´ components
  const registerMessageCallbacks = useCallback((callbacks) => {
    console.log("üìù Registering message callbacks");
    messageCallbacksRef.current = {
      ...messageCallbacksRef.current,
      ...callbacks
    };
  }, []);

  useEffect(() => {
    const token = getToken();
    if (!token) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ token ‚Äî kh√¥ng k·∫øt n·ªëi socket.");
      return;
    }

    const script = document.createElement("script");
    script.src = "https://cdn.socket.io/4.5.4/socket.io.min.js";
    script.async = true;

    script.onload = () => {
      if (socketRef.current) {
        console.log("‚ôªÔ∏è Socket ƒë√£ t·ªìn t·∫°i ‚Äî b·ªè qua t·∫°o m·ªõi.");
        return;
      }

      console.log("üîå Initializing socket connection to:", SOCKET_URL);

      const socket = window.io(SOCKET_URL, {
        query: { token },
        autoConnect: true,
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionAttempts: 10,
        timeout: 20000,
        transports: ["websocket", "polling"],
      });

      socketRef.current = socket;

      // === S·ª∞ KI·ªÜN K·∫æT N·ªêI ===
      socket.on("connect", () => {
        console.log("üü¢ [Socket] Connected successfully");
        console.log("   - Socket ID:", socket.id);
        console.log("   - Transport:", socket.io.engine.transport.name);
        setIsConnected(true);
        setError("");
      });

      socket.on("disconnect", (reason) => {
        console.log("üî¥ [Socket] Disconnected:", reason);
        setIsConnected(false);
        
        if (reason === "io server disconnect") {
          console.warn("‚ö†Ô∏è Server disconnected - may need to re-authenticate");
        }
      });

      socket.on("connect_error", (err) => {
        console.error("‚ùå [Socket] Connection error:", err.message);
        setError("Kh√¥ng th·ªÉ k·∫øt n·ªëi socket");
        setIsConnected(false);
      });

      socket.on("reconnect_attempt", (attemptNumber) => {
        console.log(`üîÑ [Socket] Reconnecting... (attempt ${attemptNumber})`);
      });

      socket.on("reconnect", (attemptNumber) => {
        console.log(`‚úÖ [Socket] Reconnected after ${attemptNumber} attempts`);
        setIsConnected(true);
        setError("");
      });

      // === S·ª∞ KI·ªÜN X√ÅC NH·∫¨N K·∫æT N·ªêI ===
      socket.on("connected", (data) => {
        console.log("‚úÖ [Socket] Connected event received:", data);
      });

      // === S·ª∞ KI·ªÜN 1: MESSAGE_SENT (X√°c nh·∫≠n tin nh·∫Øn ƒë√£ g·ª≠i) ===
      socket.on("message_sent", (data) => {
        console.log("‚úÖ [Socket] Message sent confirmed:");
        console.log("   - Real ID:", data.id);
        console.log("   - Temp ID:", data.tempMessageId);
        console.log("   - Conversation:", data.conversationId);
        console.log("   - Message:", data.message?.substring(0, 50));

        // G·ªçi callback ƒë·ªÉ c·∫≠p nh·∫≠t UI (thay tempId b·∫±ng real ID)
        if (messageCallbacksRef.current.onMessageSent) {
          messageCallbacksRef.current.onMessageSent(data);
        } else {
          console.warn("‚ö†Ô∏è No onMessageSent callback registered");
        }
      });

      // === S·ª∞ KI·ªÜN 2: MESSAGE_RECEIVED (Nh·∫≠n tin nh·∫Øn m·ªõi) ===
      socket.on("message_received", (data) => {
        console.log("üì® [Socket] Message received:");
        console.log("   - Message ID:", data.id);
        console.log("   - From:", data.sender?.username || data.senderId);
        console.log("   - Conversation:", data.conversationId);
        console.log("   - Message:", data.message?.substring(0, 50));
        console.log("   - Attachments:", data.attachments?.length || 0);

        // G·ªçi callback ƒë·ªÉ th√™m tin nh·∫Øn v√†o UI
        if (messageCallbacksRef.current.onMessageReceived) {
          messageCallbacksRef.current.onMessageReceived(data);
        } else {
          console.warn("‚ö†Ô∏è No onMessageReceived callback registered");
        }
      });

      // === S·ª∞ KI·ªÜN PH·ª§: TYPING ===
      socket.on("user_typing", (data) => {
        console.log("‚å®Ô∏è [Socket] User typing:", {
          user: data.userId,
          conversation: data.conversationId,
          isTyping: data.isTyping,
        });
        // TODO: Implement typing indicator UI
      });

      // === S·ª∞ KI·ªÜN L·ªñI ===
      socket.on("message_error", (error) => {
        console.error("‚ùå [Socket] Message error:");
        console.error("   - Code:", error.code);
        console.error("   - Message:", error.message);
        setError(error.message || "L·ªói khi g·ª≠i tin nh·∫Øn");
      });

      socket.on("auth_error", (error) => {
        console.error("‚ùå [Socket] Auth error:");
        console.error("   - Code:", error.code);
        console.error("   - Message:", error.message);
        setError("L·ªói x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
      });
    };

    script.onerror = () => {
      console.error("‚ùå Failed to load Socket.IO library");
      setError("Kh√¥ng th·ªÉ t·∫£i th∆∞ vi·ªán Socket.IO");
    };
    
    document.head.appendChild(script);

    // Cleanup function
    return () => {
      if (socketRef.current) {
        console.log("üîå [Socket] Cleaning up connection");
        
        // Remove all listeners
        socketRef.current.off("connect");
        socketRef.current.off("disconnect");
        socketRef.current.off("connect_error");
        socketRef.current.off("reconnect_attempt");
        socketRef.current.off("reconnect");
        socketRef.current.off("connected");
        socketRef.current.off("message_sent");
        socketRef.current.off("message_received");
        socketRef.current.off("user_typing");
        socketRef.current.off("message_error");
        socketRef.current.off("auth_error");
        
        // Disconnect and cleanup
        socketRef.current.disconnect();
        socketRef.current = null;
      }
      
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }
    };
  }, []); // Empty deps - ch·ªâ ch·∫°y 1 l·∫ßn khi mount

  // === Helper function ƒë·ªÉ g·ª≠i tin nh·∫Øn ===
  const sendMessage = useCallback((messageData) => {
    if (!socketRef.current || !isConnected) {
      console.error("‚ùå Cannot send message: Socket not connected");
      return false;
    }

    console.log("üì§ [Socket] Emitting send_message:", {
      conversationId: messageData.conversationId,
      tempId: messageData.messageId,
      messageLength: messageData.message?.length || 0,
      attachmentsCount: messageData.attachments?.length || 0,
    });

    try {
      socketRef.current.emit("send_message", messageData);
      return true;
    } catch (error) {
      console.error("‚ùå Error emitting message:", error);
      return false;
    }
  }, [isConnected]);

  // === Helper function ƒë·ªÉ g·ª≠i typing indicator ===
  const sendTypingIndicator = useCallback((conversationId, isTyping) => {
    if (!socketRef.current || !isConnected) {
      console.warn("‚ö†Ô∏è Cannot send typing indicator: Socket not connected");
      return;
    }
    
    console.log(`‚å®Ô∏è [Socket] Sending typing indicator: ${isTyping ? "typing..." : "stopped"}`);
    
    try {
      socketRef.current.emit("typing", {
        conversationId,
        isTyping,
      });
    } catch (error) {
      console.error("‚ùå Error sending typing indicator:", error);
    }
  }, [isConnected]);

  const contextValue = {
    socket: socketRef.current,
    isConnected,
    error,
    sendMessage,
    sendTypingIndicator,
    registerMessageCallbacks,
  };

  return (
    <SocketContext.Provider value={contextValue}>
      {children}
    </SocketContext.Provider>
  );
};

// Hook ƒë·ªÉ s·ª≠ d·ª•ng socket context
export const useSocket = () => {
  const context = useContext(SocketContext);
  if (!context) {
    throw new Error("useSocket must be used within SocketProvider");
  }
  return context;
};